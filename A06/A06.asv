% Marcos Vinicius Firmino Pietrucci
% 10914211
% Assigment 6

clear all;

%Parameters
K0 = 2;
maxK = 20000;
M = 1000;
DK = 100;
MaxRelErr = 0.04;
l1 = 0.02;
l2 = 0.2;
p1 = 0.1;

gam = 0.95;

d_gamma = norminv((1+gam)/2);

K = K0;

tA = 0;
tC = 0;

U = 0;
U2 = 0;
R = 0;
R2 = 0;
X = 0

newIters = K;

while K < maxK
	for i = 1:newIters
		Bi = 0;
		Wi = 0;
        Xi = 0;
		tA0 = tA;
	    
        arrivals = HyperExp_cdf(M, [l1, l2, p1]);
        services = Erlang_generator(rand(M*10, 1) , [10, 1.5]);%gamrnd(10, 1/1.5, M, 1);%

		for j = 1:M
		    a_ji = arrivals(j);
            s_ji = services(j);
			tC = max(tA, tC) + s_ji;
			ri = tC - tA;
			%Rd((i-1)*M+j,:) = ri;
	
			tA = tA + a_ji;
			
			Bi = Bi + s_ji;
			
			Wi = Wi + ri;

		end
		
        %Response time calculation
		Ri = Wi / M;
		R = R + Ri;
		R2 = R2 + Ri^2;
		
        %Utilization calculation
		Ti = tC - tA0;
		Ui = Bi / Ti;
		U = U + Ui;
		U2 = U2 + Ui^2;
        
        %Throughput calculation
        Xi = M/Ti;
        X = X + Xi;
        X2 = X2 + Xi^2;
	end
	
	Rm = R / K;
	Rs = sqrt((R2 - R^2/K)/(K-1));
	CiR = [Rm - d_gamma * Rs / sqrt(K), Rm + d_gamma * Rs / sqrt(K)];
	errR = 2 * d_gamma * Rs / sqrt(K) / Rm;
	
	Um = U / K;
	Us = sqrt((U2 - U^2/K)/(K-1));
	CiU = [Um - d_gamma * Us / sqrt(K), Um + d_gamma * Us / sqrt(K)];
	errU = 2 * d_gamma * Us / sqrt(K) / Um;
	
    Xm = X / K;
    Xs = sqrt((X2 - X^2/K)/(K-1));
    CiX = [Xm - d_gamma * Xs / sqrt(K), Xm + d_gamma * Xs / sqrt(K)];
    errX = 2 * d_gamma * Xs / sqrt(K) / Xm;

	if (errR < MaxRelErr && errU < MaxRelErr ...
            && errX < MaxRelErr)
		break;
	else
		K = K + DK
		newIters = DK
	end
end

if errR < MaxRelErr && errU < MaxRelErr
	fprintf(1, "Maximum Relative Error reached in %d Iterations\n", K);
else
	fprintf(1, "Maximum Relative Error NOT REACHED in %d Iterations\n", K);
end	

fprintf(1, "Utilization in [%g, %g], with %g confidence. Relative Error: %g\n", CiU(1,1), CiU(1,2), gam, errU);
fprintf(1, "Resp. Time in [%g, %g], with %g confidence. Relative Error: %g\n", CiR(1,1), CiR(1,2), gam, errR);

function F = HyperExp_cdf(L, p)
    l1 = p(1);
	l2 = p(2);
	p1 = p(3);

    for i = 1:L
        x = rand();  % Generate a random value between 0 and 1
        if x <= p1
            F(i) = -log(rand()) / l1;
        else
            F(i) = -log(rand()) / l2;
        end
    end
end

function F = Erlang_generator(x, p)
    k_erl = p(1);
    lambda_erl = p(2);
    product = 1;
    counter = 0;
    aux = 1;

    for i = 1:length(x)
        %Computing the product
        product = product * x(i);
        counter = counter + 1;        

        %Each k elements we should stop to compute the product
        if counter == k_erl
            F(aux) = -log(product) / lambda_erl;
            aux = aux + 1;
            product = 1;
            counter = 0;
        end
    end
end

